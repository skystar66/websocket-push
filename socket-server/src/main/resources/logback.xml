<!--<?xml version="1.0" encoding="UTF-8"?>-->

<!--&lt;!&ndash; 从高到地低 OFF 、 FATAL 11、 ERROR 、 WARN 、 INFO 、 DEBUG 、 TRACE 、 ALL &ndash;&gt;-->
<!--&lt;!&ndash; 日志输出规则  根据当前ROOT 级别，日志输出时，级别高于root默认的级别时  会输出 &ndash;&gt;-->
<!--&lt;!&ndash; 以下  每个配置的 filter 是过滤掉输出文件里面，会出现高级别文件，依然出现低级别的日志信息，通过filter 过滤只记录本级别的日志&ndash;&gt;-->
<!--<configuration debug="true">-->
    <!--&lt;!&ndash; 项目名称 &ndash;&gt;-->
    <!--<property name="PROJECT_NAME" value="stock-server"/>-->


    <!--&lt;!&ndash; 定义日志文件 输入位置 &ndash;&gt;-->
    <!--<property name="log_dir" value="./log/stock-server"/>-->
    <!--&lt;!&ndash; 日志最大的历史 30天 &ndash;&gt;-->
    <!--<property name="maxHistory" value="30"/>-->

    <!--&lt;!&ndash; ConsoleAppender 控制台输出日志 &ndash;&gt;-->
    <!--<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">-->
        <!--&lt;!&ndash; 对日志进行格式化 &ndash;&gt;-->
        <!--<encoder>-->
            <!--<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger -%msg%n</pattern>-->
        <!--</encoder>-->
    <!--</appender>-->


    <!--&lt;!&ndash; ERROR级别日志 &ndash;&gt;-->
    <!--&lt;!&ndash; 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 RollingFileAppender&ndash;&gt;-->
    <!--<appender name="ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
        <!--&lt;!&ndash; 过滤器，只记录WARN级别的日志 &ndash;&gt;-->
        <!--<filter class="ch.qos.logback.classic.filter.LevelFilter">-->
            <!--<level>ERROR</level>-->
            <!--<onMatch>ACCEPT</onMatch>-->
            <!--<onMismatch>DENY</onMismatch>-->
        <!--</filter>-->
        <!--&lt;!&ndash; 最常用的滚动策略，它根据时间来制定滚动策略.既负责滚动也负责出发滚动 &ndash;&gt;-->
        <!--<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
            <!--&lt;!&ndash;日志输出位置  可相对、和绝对路径 &ndash;&gt;-->
            <!--<fileNamePattern>${log_dir}/%d{yyyy-MM-dd}/stock-server-error-log.log</fileNamePattern>-->
            <!--&lt;!&ndash; 可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件假设设置每个月滚动，且<maxHistory>是6，-->
            <!--则只保存最近6个月的文件，删除之前的旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除&ndash;&gt;-->
            <!--<maxHistory>${maxHistory}</maxHistory>-->
        <!--</rollingPolicy>-->

        <!--&lt;!&ndash; 按照固定窗口模式生成日志文件，当文件大于20MB时，生成新的日志文件。窗口大小是1到3，当保存了3个归档文件后，将覆盖最早的日志。-->
        <!--<rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">-->
          <!--<fileNamePattern>${log_dir}/%d{yyyy-MM-dd}/.log.zip</fileNamePattern>-->
          <!--<minIndex>1</minIndex>-->
          <!--<maxIndex>3</maxIndex>-->
        <!--</rollingPolicy>   &ndash;&gt;-->
        <!--&lt;!&ndash; 查看当前活动文件的大小，如果超过指定大小会告知RollingFileAppender 触发当前活动文件滚动-->
        <!--<triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">-->
            <!--<maxFileSize>5MB</maxFileSize>-->
        <!--</triggeringPolicy>   &ndash;&gt;-->

        <!--<encoder>-->
            <!--<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger - %msg%n</pattern>-->
        <!--</encoder>-->
    <!--</appender>-->


    <!--&lt;!&ndash; INFO级别日志 appender &ndash;&gt;-->
    <!--<appender name="INFO" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
        <!--&lt;!&ndash; 过滤器，只记录INFO级别的日志 &ndash;&gt;-->
        <!--<filter class="ch.qos.logback.classic.filter.LevelFilter">-->
            <!--<level>INFO</level>-->
            <!--<onMatch>ACCEPT</onMatch>-->
            <!--<onMismatch>DENY</onMismatch>-->
        <!--</filter>-->
        <!--<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
            <!--&lt;!&ndash; 按天回滚 daily &ndash;&gt;-->
            <!--<fileNamePattern>${log_dir}/%d{yyyy-MM-dd}/stock-server-info-log.log-->
            <!--</fileNamePattern>-->
            <!--&lt;!&ndash; 日志最大的历史 60天 &ndash;&gt;-->
            <!--<maxHistory>${maxHistory}</maxHistory>-->
        <!--</rollingPolicy>-->
        <!--<encoder>-->
            <!--<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger - %msg%n</pattern>-->
        <!--</encoder>-->
    <!--</appender>-->


    <!--<logger name="org.springframework" level="error"/>-->
    <!--&lt;!&ndash; 下面是打印 mybatis语句的配置 &ndash;&gt;-->
    <!--<logger name="org.mybatis" additivity="true">-->
    <!--</logger>-->

    <!--<logger name="java.sql.Connection" additivity="true">-->
    <!--</logger>-->

    <!--<logger name="java.sql.Statement" additivity="true">-->
    <!--</logger>-->

    <!--<logger name="java.sql.PreparedStatement" additivity="true">-->
    <!--</logger>-->

    <!--<logger name="java.sql.ResultSet" additivity="true">-->
    <!--</logger>-->
    <!--<logger name="org.springframework.cloud" level="debug" additivity="false">-->


    <!--</logger>-->

    <!--<logger name="org.apache.http" level="debug" additivity="false">-->

    <!--</logger>-->


    <!--<logger name="com.netflix.discovery" level="debug" additivity="false">-->

    <!--</logger>-->


    <!--<logger name="com.netflix.config" level="debug" additivity="false">-->

    <!--</logger>-->

    <!--&lt;!&ndash; root级别   DEBUG &ndash;&gt;-->
    <!--<root level="DEBUG">-->
        <!--&lt;!&ndash; 控制台输出 &ndash;&gt;-->
        <!--<appender-ref ref="STDOUT"/>-->
        <!--&lt;!&ndash; 文件输出 &ndash;&gt;-->
        <!--<appender-ref ref="ERROR"/>-->
        <!--<appender-ref ref="INFO"/>-->
        <!--&lt;!&ndash;<appender-ref ref="WARN"/>&ndash;&gt;-->
<!--&lt;!&ndash;-->
        <!--<appender-ref ref="DEBUG"/>-->
<!--&ndash;&gt;-->
        <!--&lt;!&ndash;<appender-ref ref="TRACE"/>&ndash;&gt;-->
    <!--</root>-->
<!--</configuration>-->
